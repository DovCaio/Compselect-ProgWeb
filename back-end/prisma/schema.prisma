
generator client {
  provider = "prisma-client-js"
  //binaryTargets = ["native", "linux-musl-openssl-3.0.x"]  //Se der problema no docker, descomentar
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id Int @id @default(autoincrement())
  createAt DateTime @default(now())
  title    String @unique
  dateEvent DateTime //Deveria sor ser date
  time String
  description String
  target String[]
  activities String[]
  image String
  location Location?
}


model Location {
  id Int @id @default(autoincrement())
  country String
  city String
  street String
  number Int
  eventId Int @unique
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}



model Post {
  id Int @id @default(autoincrement())

  createAt DateTime @default(now())
  images String[]
  titles String[] 
  texts String[]
  links String[]
  sequenceOfContent Int[] /*Cada indice é uma a posição do elemento, ex: indice 0, primeiro elemento.
  Os valores nesses indices são o que representam o os elemeentos, ex: image - 0, 
  title - 1, text - 2, link - 3
  tamanho desse array sempre deve ser a quantidade de total de todos os itens: images titulos,
  textos e links, e também deve conter a quantidade correta de valores dos indices e os valores
  desses mesmos indices como coluna da tabela */
  comments Comment[]
}

model Comment {
  id Int @id @default(autoincrement())
  createAt DateTime @default(now())
  userName String?
  email String @unique
  accept Boolean
  pending Boolean /* Quando um comentário é feito, um email é mandado para que o dono do comentário aceite
  so asssim ele passa a ter essa coluna como sendo false, e com isso é deve aparecer no manager, para que
  seja aceita ou não, caso seja aceita 

  */
  emailVerificationToken String @unique
  content String
  postId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}
model Author {
  id Int @id @default(autoincrement())
  createAt DateTime @default(now())
  firstName String
  lastName String
  image String
  bibliography String
}

model Publication {
  id Int @id @default(autoincrement())
  title String @unique
  image String
  createAt DateTime @default(now())
  type String
}

model AuthorsOnPublications { 
  
  authorId Int
  publicationId Int


  @@id([authorId, publicationId])
}

/* Desisti, muita já tem muita implentação, e isso pode acarretar em perca de performace
model Statistics {
  id Int @id @default(autoincrement())
  year Int
  month Int
  createAt DateTime @default(now())
  qttSecondsEventPage Int  
  qttSecondsPublicationsPage Int
  qttSecondsAuthorsPage Int
  qttSecondsPostPage Int
  qttVisitors Int

  @@unique([year, month])
}*/
